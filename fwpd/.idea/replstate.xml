<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1482639680733">{:repl-history {:ide [], :local [&quot;(Integer \&quot;10\\r\&quot;)&quot; &quot;(Integer. \&quot;10\\r\&quot;)&quot; &quot;parse&quot; &quot;(filename)&quot; &quot;(slurp filename)&quot; &quot;filename&quot; &quot;(parse (slurp filename))&quot; &quot;(mapify (parse (slurp filename)))&quot; &quot;(glitter-filter 3 (mapify (parse (slurp filename))))&quot; &quot;(glitter-filter-names 3 (mapify (parse (slurp filename))))&quot; &quot;(def vamp-records (mapify (slurp filename)))&quot; &quot;(vamp-records)&quot; &quot;(append \&quot;Jack Sparrow\&quot; 11 vamp-record)&quot; &quot;(append \&quot;Jack Sparrow\&quot; 11 vamp-records)&quot; &quot;(validate default-validators {:name \&quot;Jack Sparrow\&quot; :glitter-index 10})&quot; &quot;(#((%1 %2) (%1 %3)) :name contains? {:name \&quot;Jack Sparrow\&quot;}) &quot; &quot;(#(%1 %2 (%1 %3)) :name contains? {:name \&quot;Jack Sparrow\&quot;}) &quot; &quot;(def vamp-records (mapify (parse (slurp filename))))&quot; &quot;(def record {:name \&quot;Jack Sparrow\&quot; :glitter-index 11})&quot; &quot;(def default-validators {:name #(contains? % :name) :glitter-index #(contains? % name)})\n&quot; &quot;default-validators&quot; &quot;(default-validators :name)&quot; &quot;(default-validators :name) {:name \&quot;test\&quot;}&quot; &quot;(identity true)&quot; &quot;((default-validators :name) {:name \&quot;test\&quot;})&quot; &quot;((default-validators :glitter-index) {:glitter-index \&quot;test\&quot;})&quot; &quot;((default-validators :glitter-index) record)&quot; &quot;((default-validators :name) record)&quot; &quot;[((default-validators :name) record) ((default-validators :name) record)] &quot; &quot;(every? [((default-validators :name) record) ((default-validators :name) record)]) &quot; &quot;(every? identity [((default-validators :name) record) ((default-validators :name) record)]) &quot; &quot;(map #(%1 %2 (%1 %3)) vamp-keys validators record)&quot; &quot;vamp-keys&quot; &quot;(map #(%1 %2 (%1 %3)) vamp-keys default-validators record)&quot; &quot;(map #(%1 %2 %1 %3) vamp-keys default-validators record)&quot; &quot;(map (fn [key validator record] ((key default-validators) (key record))) vamp-keys default-validators record)&quot; &quot;(every? identity (map identity vamp-keys validators record))&quot; &quot;(map identity vamp-keys validators record)&quot; &quot;(map identity vamp-keys default-validators record)&quot; &quot;(map str vamp-keys default-validators record)&quot; &quot;(defn validate\n  \&quot;Validates a vampire record based on provided validator function for each key.\&quot;\n  [validators record]\n  (every? identity (map #((get %1 1) (get %2 1)) validators record)))&quot; &quot;(map + [1 1 1] [2 2])&quot; &quot;(defn validate\n  \&quot;Validates a vampire record based on provided validator function for each key.\&quot;\n  [validators record]\n  (every? (map (fn [key validator]\n                 ((key validator) record)) vamp-keys validators)))&quot; &quot;(defn validate\n  \&quot;Validates a vampire record based on provided validator function for each key.\&quot;\n  [validators record]\n  (every? identity (map (fn [key validator]\n                          ((key validator) record)) vamp-keys validators)))&quot; &quot;(map (fn [key validator]\n       ((key validator) record)) vamp-keys validators)&quot; &quot;(map (fn [key validator]\n       (key validator) record) vamp-keys default-validators)&quot; &quot;(:name default-validators)&quot; &quot;(def default-validators {:name #(contains? % :name) :glitter-index #(contains? % :glitter-index)})\n&quot; &quot;(:name default-validators) record&quot; &quot;((:name default-validators) record)&quot; &quot;(map (fn [key validator]\n       ((key validator) record)) vamp-keys default-validators)&quot; &quot;() (fn [key validator]\n       ((key validator) record)) vamp-keys default-validators)&quot; &quot;((fn [key validator]\n   ((key validator) record)) :name #(contains? % name))&quot; &quot;((fn [key validator]\n   ((key validator) record)) :name {:name #(contains? % name)})&quot; &quot;((fn [key validator]\n   (key validator record)) :name {:name #(contains? % name)})&quot; &quot;(defn extract-validator\n  \&quot;Pulls a validator to apply for a validator map.\&quot;\n  [key validator]\n  (key validator))&quot; &quot;(extract-validator :name default-validators) record&quot; &quot;((extract-validator :name default-validators) record)&quot; &quot;(defn validate\n  \&quot;Validates a vampire record based on provided validator function for each key\&quot;\n  (every? identity (map (fn [key validator]\n                          ((extract-validator key validator) record)) vamp-keys validators)))\n&quot; &quot;(defn validate\n  \&quot;Validates a vampire record based on provided validator function for each key\&quot;\n  [validators record]\n  (every? identity (map (fn [key validator]\n                          ((extract-validator key validator) record)) vamp-keys validators)))\n&quot; &quot;record&quot; &quot;(map (fn [key validator]\n       ((extract-validator key validator) record)) vamp-keys validators)&quot; &quot;(map (fn [key validator]\n       ((extract-validator key validator) record)) vamp-keys default-validators)&quot; &quot;(:wrong {:name \&quot;test\&quot;})&quot; &quot;(nil {:name \&quot;test\&quot;})&quot; &quot;(defn validate\n  \&quot;Validates a vampire record based on provided validator function for each key\&quot;\n  [validators record]\n  (every? identity (map (fn [key]\n                          (#(contains? % key) record)) vamp-keys)))&quot; &quot;(extract-validator :name default-validators)&quot; &quot;'(extract-validator :name default-validators)&quot; &quot;((extract-validator :name default-validators))&quot; &quot;(map (fn [key]\n       (#(contains? % key) record)) vamp-keys)&quot; &quot;(defn validate\n  \&quot;Validates a vampire record based on provided validator function for each key\&quot;\n  [validators record]\n  (every? identity (map (fn [key]\n                          ((extract-validator key validators) record)) vamp-keys)))\n&quot; &quot;(validate default-validators record)&quot; &quot;vamp-records&quot; &quot;(defn map-to-csv\n  \&quot;Takes the map back to a csv string.\&quot;\n  [records]\n  (reduce (fn [result record]\n            (str (clojure.string/join \&quot;,\&quot; [(:name record) (:glitter-index record)]) \&quot;\\n\&quot;))\n          \&quot;\&quot; records))&quot; &quot;(defn map-to-csv\n  \&quot;Takes the map back to a csv string.\&quot;\n  [records]\n  (reduce (fn [result record]\n            (str result (clojure.string/join \&quot;,\&quot; [(:name record) (:glitter-index record)]) \&quot;\\n\&quot;))\n          \&quot;\&quot; records))&quot; &quot;(map-to-csv vamp-records)&quot;], :remote []}}</component>
</project>