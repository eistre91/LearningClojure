<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1482630244307">{:repl-history {:ide [], :local [&quot;(def max 3)&quot; &quot;max&quot; &quot;(def part (asym-mutant-body-parts 1))&quot; &quot;part&quot; &quot;(reduce (fn [result t] (into result (matching-part (last result) max))) [part] (repeat (- max 1) \&quot;x\&quot;))&quot; &quot;(def result [part])&quot; &quot;(matching-part (last result) max)&quot; &quot;(into result (matching-part (last result) max))&quot; &quot;(conj [1] {a: \&quot;a\&quot;})&quot; &quot;(conj [1] {:a \&quot;a\&quot;})&quot; &quot;(symmetrize-max-body-parts asym-mutant-body-parts 5)&quot; &quot;(mapset inc [1 2])&quot; &quot;(mapset inc [1 1])&quot; &quot;(mapset inc [1 1 2 3 4 5 2])&quot; &quot;(Integer. \&quot;1\&quot;)&quot; &quot;(Integer \&quot;1\&quot;)&quot; &quot;(repeat 5 \&quot;x\&quot;)&quot; &quot;-main&quot; &quot;(-main)&quot; &quot;println (println \&quot;1\&quot;)&quot; &quot;(println\n  (println \&quot;1\&quot;))&quot; &quot;(when true\n  (println \&quot;test\&quot;)\n  (println \&quot;test2\&quot;)\n  \&quot;return\&quot;)&quot; &quot;#{\&quot;kurt\&quot; 1 true}&quot; &quot;(doc map)&quot; &quot;(announce-treasure-location )&quot; &quot;(announce-treasure-location) {:lat 28.22 :lng 81.33}&quot; &quot;(announce-treasure-location {:lat 28.22 :lng 81.33}) &quot; &quot;(seq \&quot;test\&quot;)&quot; &quot;(map + [1 2])&quot; &quot;(map #(+ % 2) [1 2])&quot; &quot;(map println [\&quot;test\&quot; \&quot;test2\&quot;])&quot; &quot;(add-100 10)&quot; &quot;(map println [(add-100 10) (add-100 100)])&quot; &quot;(println [1 2])&quot; &quot;(def dec9 (dec-maker 9))&quot; &quot;dec9&quot; &quot;(dec9 10)&quot; &quot;(def dec11 (dec-maker 11))&quot; &quot;(dec11 2)&quot; &quot;(first [1 2])&quot; &quot;(first [])&quot; &quot;(mapset #(+ % 1) [1 2])&quot; &quot;(println (mapset #(+ % 1) [1 2]))&quot; &quot;(+ 1 2)&quot; &quot;(mapset #(+ 1 %) [1 2])&quot; &quot;#{1 2}&quot; &quot;#{1 2 1}&quot; &quot;(into #{1} 1)&quot; &quot;(into hash-set {1})&quot; &quot;asym-mutant-body-parts&quot; &quot;asym-mutant-body-parts 0&quot; &quot;(asym-mutant-body-parts 0) &quot; &quot;(loop-parts (asym-mutant-body-parts 1) 2) &quot; &quot;(re-find #\&quot;^\\d+\&quot; \&quot;0-eye\&quot;)&quot; &quot;(Integer. (re-find #\&quot;^\\d+\&quot; \&quot;0-eye\&quot;))&quot; &quot;(loop-parts (:name (asym-mutant-body-parts 1)) 2) &quot; &quot;(matching-part (asym-mutant-body-parts 1))&quot; &quot;(def test 1)&quot; &quot;(matching-part (asym-mutant-body-parts 1) 2)&quot; &quot;(int 10)&quot; &quot;(type 2)&quot; &quot;(Integer. 2)&quot; &quot;(type Integer 2.)&quot; &quot;(type (Integer. 2))&quot; &quot;(last [1])&quot; &quot;(last [])&quot; &quot;(symmetrize-max-body-parts asym-mutant-body-parts (Integer. 2))&quot; &quot;(result)&quot; &quot;(def result [asym-mutant-body-parts 0])&quot; &quot;def&quot; &quot;(def result [(asym-mutant-body-parts 0)])&quot; &quot;result&quot; &quot;(matching-part (last result) 2)&quot; &quot;(last result)&quot; &quot;(symmetrize-max-body-parts asym-mutant-body-parts 2)&quot; &quot;(seq {:a 1 :b 2})&quot; &quot;(seq [1 2 3 4])&quot; &quot;(seq [1 2 [3] 4])&quot; &quot;(true)&quot; &quot;(true\n   \&quot;test\&quot;\n    \&quot;test2\&quot;)&quot; &quot;(condp = :warn\n   \&quot;test\&quot;\n    \&quot;test2\&quot;)&quot; &quot;(test = :a\n   :a \&quot;test\&quot;\n   :b \&quot;test2\&quot;)&quot; &quot;(warn \&quot;Red Light Ahead\&quot;)&quot;], :remote []}}</component>
</project>