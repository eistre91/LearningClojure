<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1482733358232">{:repl-history {:ide [], :local [&quot;(defn operation-present?\n  [quoted-infix-list op]\n  (some #(= `* %) quoted-infix-list))&quot; &quot;(defn operation-present?\n  [quoted-infix-list quoted-op]\n  (some #(= * %) quoted-infix-list))&quot; &quot;(some #(= `* %) `(* * *))&quot; &quot;(operation-present? `(* * *) `*)&quot; &quot;(defn operation-present?\n  [quoted-infix-list quoted-op]\n  (some #(= `* %) quoted-infix-list))&quot; &quot;(operation-present? `(* * *) *)&quot; &quot;(take-while #(not (= % *)) (1 * 2))&quot; &quot;(take-while #(not (= % *)) `(1 * 2))&quot; &quot;(take-while #(not (= % `*)) `(1 * 2))&quot; &quot;(operation-present? `(1 * 2) *)&quot; &quot;(translate-infix `(1 * 2))&quot; &quot;(eval (translate-infix `(1 * 2)))&quot; &quot;(translate-infix (1 + 1 + 1))&quot; &quot;(translate-infix `(1 + 1 + 1))&quot; &quot;(defn operation-present?\n  [quoted-infix-list op]\n  (some #(= `op %) quoted-infix-list))&quot; &quot;(operation-present? `(1 * 1 * 1) +)&quot; &quot;(operation-present? `(1 + 1 + 1) +)&quot; &quot;(operation-present? `(1 + 1 + 1) `+)&quot; &quot;(operation-present? `(1 + 1 + 1) *)&quot; &quot;(operation-present? `(1 + 1 * 1) *)&quot; &quot;(vector (1 2 3))&quot; &quot;(vector 1 2 3)&quot; &quot;(apply vector (1 2 3))&quot; &quot;(apply vector `(1 2 3))&quot; &quot;(str (1 2 3))&quot; &quot;(str `(1 2 3))&quot; &quot;(count \&quot;asfd\&quot;)&quot; &quot;(first \&quot;a\&quot;)&quot; &quot;(first \&quot;abc\&quot;)&quot; &quot;(second \&quot;abc\&quot;)&quot; &quot;(str (second \&quot;abc\&quot;))&quot; &quot;(str (last \&quot;abc\&quot;) (second \&quot;abc\&quot;))&quot; &quot;(take 5 \&quot;Abc\&quot;)&quot; &quot;(take 2 \&quot;Abc\&quot;)&quot; &quot;(some #(= \&quot;*\&quot; %) \&quot;(+ 1 2)\&quot;)&quot; &quot;(some #(= \&quot;*\&quot; %) \&quot;(1 * 2)\&quot;)&quot; &quot;(some #(= \&quot;1\&quot; %) \&quot;(1 * 2)\&quot;)&quot; &quot;(re-find #\&quot;*\&quot; \&quot;1 * 2\&quot;)&quot; &quot;(re-find #\&quot;*\&quot; \&quot;1 \\* 2\&quot;)&quot; &quot;(re-find #\&quot;\\*\&quot; \&quot;1 * 2\&quot;)&quot; &quot;(re-find #\&quot;\\*\&quot; \&quot;1 + 2\&quot;)&quot; &quot;(if (re-find #\&quot;\\*\&quot; \&quot;1 + 2\&quot;) \&quot;test\&quot;)&quot; &quot;(if (re-find #\&quot;\\*\&quot; \&quot;1 + 2\&quot;) \&quot;test\&quot; \&quot;worked\&quot;)&quot; &quot;(if (re-find #\&quot;\\*\&quot; \&quot;1 * 2\&quot;) \&quot;test\&quot; \&quot;worked\&quot;)&quot; &quot;(re-find #\&quot;/\&quot; \&quot;1 / 2\&quot;)&quot; &quot;(re-find #\&quot;-\&quot; \&quot;1 -\n2\&quot;)&quot; &quot;(re-find #\&quot;-\&quot; \&quot;1 -2\&quot;)&quot; &quot;(re-find #\&quot;-\&quot; \&quot;1 - 2\&quot;)&quot; &quot;(re-find #\&quot;+\&quot; \&quot;1 - 2\&quot;)&quot; &quot;(re-find #\&quot;\\+\&quot; \&quot;1 - 2\&quot;)&quot; &quot;str (\&quot;a\&quot; \&quot;b\&quot;)&quot; &quot;(str \&quot;a\&quot; \&quot;b\&quot;)&quot; &quot;(last \&quot;(a b c)\&quot;)&quot; &quot;(read-string (str `(1 + 2)))&quot; &quot;(eval (read-string (str `(1 + 2))))&quot; &quot;(eval (read-string (str `(+ 1 2))))&quot; &quot;(use clojure.string)&quot; &quot;(use `(clojure.string))&quot; &quot;(split \&quot;(1 + 2)\&quot; #\&quot;(\&quot;)&quot; &quot;(split \&quot;(1 + 2)\&quot; #\&quot;\\(\&quot;) )&quot; &quot;(split \&quot;(1 + 2)\&quot; #\&quot;\\(\&quot;)&quot; &quot;(clojure.string/split \&quot;(1 + 2)\&quot; #\&quot;\\(\&quot;)&quot; &quot;(clojure.string/split \&quot;(1 + 2)\&quot; #\&quot; \&quot;)&quot; &quot;(clojure.string/replace \&quot;(1 + 2)\&quot; #\&quot;[\\(\\)]\&quot; \&quot;\&quot;)&quot; &quot;(count \&quot;abcd\&quot;)&quot; &quot;(+ 1  2)&quot; &quot;(take-while #(not (= % \&quot;*\&quot;)) \&quot;(1 * 2)\&quot;)&quot; &quot;(str/split \&quot;(1 + 2 + 3)\&quot; #\&quot;_\&quot;)&quot; &quot;(str/split \&quot;(1 + 2 + 3)\&quot; #\&quot;\\+\&quot;)&quot; &quot;(clojure.string/split \&quot;(1 + 2 + 3)\&quot; #\&quot;\\+\&quot;)&quot; &quot;(clojure.string/split \&quot;(1 + 2 + 3)\&quot; #\&quot;\\+\&quot; 1)&quot; &quot;(clojure.string/split \&quot;(1 + 2 + 3)\&quot; #\&quot;\\+\&quot; 2)&quot; &quot;(get (clojure.string/split \&quot;(1 + 2 + 3)\&quot; #\&quot;\\+\&quot; 2)\n  1)&quot; &quot;(operation-present? \&quot;(1 + 2)\&quot; #\&quot;+\&quot;)&quot; &quot;(operation-present? \&quot;(1 + 2)\&quot; #\&quot;\\+\&quot;)&quot; &quot;(begin-translation \&quot;(1 + 2)\&quot;)&quot; &quot;(defn begin-translation\n      [infix-list]\n      (translate-infix (strip-paren (str (infix-list)))))&quot; &quot;(defn begin-translation\n      [infix-list]\n      (translate-infix (strip-paren (str infix-list))))&quot; &quot;(begin-translation `(1 + 2))&quot; &quot;(eval (begin-translation `(1 + 2)))&quot; &quot;(operation-present? \&quot;1 + 2 + 3\&quot; #\&quot;\\+\&quot;)&quot; &quot;(println (str `(1 + 2)))&quot; &quot;(str `(1 + 2))&quot; &quot;`(1 + 2)&quot; &quot;`(1 / 2)&quot; &quot;(eval (read-string (begin-translation `(1 + 2))))&quot; &quot;(eval (read-string (begin-translation `(1 + 2 + 2))))&quot; &quot;(fn [] \&quot;test\&quot;)&quot; &quot;((fn [] \&quot;test\&quot;))&quot; &quot;((fn [] (\&quot;test\&quot;)))&quot; &quot;(begin-translation `(1 + 2 + 3))&quot; &quot;(eval (read-string (begin-translation `(1 + 2 + 3))))&quot; &quot;(eval (read-string (begin-translation `(1 + 2 + 3 + 4))))&quot; &quot;(eval (read-string (begin-translation `(1 + 2 + 3 - 4))))&quot; &quot;(eval (read-string (begin-translation `(1 - 2 + 3 - 4))))&quot; &quot;(eval (read-string (begin-translation `(1 * 2 + 3 - 4))))&quot; &quot;(eval (read-string (begin-translation `(1 + 2 + 3 * 4))))&quot; &quot;(eval (read-string (begin-translation `(1 - 2 + 3 * 4))))&quot; &quot;(begin-translation `(1 - 2 + 3 * 4))&quot; &quot;(begin-translation `(1 - 2 + 3 * 4 / 5))&quot; &quot;(eval (read-string (begin-translation `(1 - 2 + 3 * 4 / 5))))&quot;], :remote []}}</component>
</project>